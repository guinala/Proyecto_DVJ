//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""bf4c0670-0ae8-4c3e-aa96-567ef7ab10cb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b357cf07-3caa-4cf6-8a11-95eb89a4302f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8df0f9c6-624a-4153-bd42-a9d6a30e493e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Running"",
                    ""type"": ""Button"",
                    ""id"": ""a110dbed-dd80-415e-a19f-8204ffe50038"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slide"",
                    ""type"": ""Button"",
                    ""id"": ""b4d27c2e-db38-4fee-8967-7cddb4eee8ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""08dc9ace-d963-43bf-b97c-23d4685eea06"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""095d0760-7d3b-42f8-a3f8-3604f6c532ac"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""937760b5-6689-48c8-9ff1-66dee6c8cff7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""47dc9e8a-92c1-4090-af56-4ac7a6228201"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f2fba86c-b5e1-4272-ac26-93943fc55533"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""92067940-a19c-4c05-b22f-8f3b422c075c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76b73662-3e73-44c6-93f1-c61c5f81b2b5"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7c71cc2-311a-4dfe-a90e-8682843146f6"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameSettings"",
            ""id"": ""7df11bd9-520f-4892-bdb0-fe1ddfdac768"",
            ""actions"": [
                {
                    ""name"": ""Graphics"",
                    ""type"": ""Button"",
                    ""id"": ""29f7a2bc-0120-49d0-b89b-3afe5f826cb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FullScreen"",
                    ""type"": ""Button"",
                    ""id"": ""0f3ae7f1-2d09-42fc-84a8-a108b9bfd61a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Show/Hide FPS"",
                    ""type"": ""Button"",
                    ""id"": ""c5274b3c-bcfd-41de-af19-fa7963fa1378"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeResolution"",
                    ""type"": ""Button"",
                    ""id"": ""4b5c6fa7-15d0-4d0c-b4be-f552433eb4fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4a3a2376-6a95-4fa7-96a7-b5b2a5882467"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Graphics"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d320b7f5-9e9b-4b5e-bc5b-ef82ae69e690"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Graphics"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a172b19a-896c-425a-92c8-af987df6ad2d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Graphics"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17638f36-03a7-497d-9d91-40b1d22f222e"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FullScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79b4b3af-2333-4cad-9560-2d48f366bfb1"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Show/Hide FPS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08533896-67cd-4ae1-a1c9-463346e8f51c"",
                    ""path"": ""<Keyboard>/f10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeResolution"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Movement = m_PlayerActions.FindAction("Movement", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActions_Running = m_PlayerActions.FindAction("Running", throwIfNotFound: true);
        m_PlayerActions_Slide = m_PlayerActions.FindAction("Slide", throwIfNotFound: true);
        // GameSettings
        m_GameSettings = asset.FindActionMap("GameSettings", throwIfNotFound: true);
        m_GameSettings_Graphics = m_GameSettings.FindAction("Graphics", throwIfNotFound: true);
        m_GameSettings_FullScreen = m_GameSettings.FindAction("FullScreen", throwIfNotFound: true);
        m_GameSettings_ShowHideFPS = m_GameSettings.FindAction("Show/Hide FPS", throwIfNotFound: true);
        m_GameSettings_ChangeResolution = m_GameSettings.FindAction("ChangeResolution", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private List<IPlayerActionsActions> m_PlayerActionsActionsCallbackInterfaces = new List<IPlayerActionsActions>();
    private readonly InputAction m_PlayerActions_Movement;
    private readonly InputAction m_PlayerActions_Jump;
    private readonly InputAction m_PlayerActions_Running;
    private readonly InputAction m_PlayerActions_Slide;
    public struct PlayerActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerActions_Movement;
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputAction @Running => m_Wrapper.m_PlayerActions_Running;
        public InputAction @Slide => m_Wrapper.m_PlayerActions_Slide;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Running.started += instance.OnRunning;
            @Running.performed += instance.OnRunning;
            @Running.canceled += instance.OnRunning;
            @Slide.started += instance.OnSlide;
            @Slide.performed += instance.OnSlide;
            @Slide.canceled += instance.OnSlide;
        }

        private void UnregisterCallbacks(IPlayerActionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Running.started -= instance.OnRunning;
            @Running.performed -= instance.OnRunning;
            @Running.canceled -= instance.OnRunning;
            @Slide.started -= instance.OnSlide;
            @Slide.performed -= instance.OnSlide;
            @Slide.canceled -= instance.OnSlide;
        }

        public void RemoveCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // GameSettings
    private readonly InputActionMap m_GameSettings;
    private List<IGameSettingsActions> m_GameSettingsActionsCallbackInterfaces = new List<IGameSettingsActions>();
    private readonly InputAction m_GameSettings_Graphics;
    private readonly InputAction m_GameSettings_FullScreen;
    private readonly InputAction m_GameSettings_ShowHideFPS;
    private readonly InputAction m_GameSettings_ChangeResolution;
    public struct GameSettingsActions
    {
        private @PlayerControls m_Wrapper;
        public GameSettingsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Graphics => m_Wrapper.m_GameSettings_Graphics;
        public InputAction @FullScreen => m_Wrapper.m_GameSettings_FullScreen;
        public InputAction @ShowHideFPS => m_Wrapper.m_GameSettings_ShowHideFPS;
        public InputAction @ChangeResolution => m_Wrapper.m_GameSettings_ChangeResolution;
        public InputActionMap Get() { return m_Wrapper.m_GameSettings; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameSettingsActions set) { return set.Get(); }
        public void AddCallbacks(IGameSettingsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameSettingsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameSettingsActionsCallbackInterfaces.Add(instance);
            @Graphics.started += instance.OnGraphics;
            @Graphics.performed += instance.OnGraphics;
            @Graphics.canceled += instance.OnGraphics;
            @FullScreen.started += instance.OnFullScreen;
            @FullScreen.performed += instance.OnFullScreen;
            @FullScreen.canceled += instance.OnFullScreen;
            @ShowHideFPS.started += instance.OnShowHideFPS;
            @ShowHideFPS.performed += instance.OnShowHideFPS;
            @ShowHideFPS.canceled += instance.OnShowHideFPS;
            @ChangeResolution.started += instance.OnChangeResolution;
            @ChangeResolution.performed += instance.OnChangeResolution;
            @ChangeResolution.canceled += instance.OnChangeResolution;
        }

        private void UnregisterCallbacks(IGameSettingsActions instance)
        {
            @Graphics.started -= instance.OnGraphics;
            @Graphics.performed -= instance.OnGraphics;
            @Graphics.canceled -= instance.OnGraphics;
            @FullScreen.started -= instance.OnFullScreen;
            @FullScreen.performed -= instance.OnFullScreen;
            @FullScreen.canceled -= instance.OnFullScreen;
            @ShowHideFPS.started -= instance.OnShowHideFPS;
            @ShowHideFPS.performed -= instance.OnShowHideFPS;
            @ShowHideFPS.canceled -= instance.OnShowHideFPS;
            @ChangeResolution.started -= instance.OnChangeResolution;
            @ChangeResolution.performed -= instance.OnChangeResolution;
            @ChangeResolution.canceled -= instance.OnChangeResolution;
        }

        public void RemoveCallbacks(IGameSettingsActions instance)
        {
            if (m_Wrapper.m_GameSettingsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameSettingsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameSettingsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameSettingsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameSettingsActions @GameSettings => new GameSettingsActions(this);
    public interface IPlayerActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRunning(InputAction.CallbackContext context);
        void OnSlide(InputAction.CallbackContext context);
    }
    public interface IGameSettingsActions
    {
        void OnGraphics(InputAction.CallbackContext context);
        void OnFullScreen(InputAction.CallbackContext context);
        void OnShowHideFPS(InputAction.CallbackContext context);
        void OnChangeResolution(InputAction.CallbackContext context);
    }
}
